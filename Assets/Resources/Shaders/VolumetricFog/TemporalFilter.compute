#include "UnityCG.cginc"
#pragma kernel CSMain

Texture3D<half4> exponentialHistory;
Texture3D<half4> fogVolume;
RWTexture3D<half4> result;

SamplerState MyLinearClampSampler;

float4 cameraPosition;
float4 frustumRays[4];
float4 sliceDepths[32];
matrix historyViewProjection;
float3 volumeResolutionInv;
float4 clipParams;
float farPlane;
float distance;
float3 volumeRes;

[numthreads(8,8,8)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
	float3 volCoord = float3(float3(id) * volumeResolutionInv + 0.5f * volumeResolutionInv);

	// calculate position in history volume
	float z = sliceDepths[id.z >> 2][id.z & 3];
	
	float3 upperRay = lerp(frustumRays[1].xyz, frustumRays[2].xyz, volCoord.x);
	float3 lowerRay = lerp(frustumRays[0].xyz, frustumRays[3].xyz, volCoord.x);
	float3 frustrumRay = lerp(lowerRay, upperRay, volCoord.y);
	float3 worldPosition = cameraPosition.xyz + z * frustrumRay;

	float4 historyNdc = mul(historyViewProjection, float4(worldPosition, 1));
	historyNdc /= historyNdc.w;
	float3 historyVolumeCoord = float3((historyNdc.xy + 1) * 0.5, 0);
	historyVolumeCoord.y = 1 - historyVolumeCoord.y;
	z = clipParams.x + (farPlane - clipParams.x) * Linear01Depth(historyNdc.z);
	historyVolumeCoord.z = (log(min(z, distance)) - clipParams.w) * clipParams.z;

	half4 historySample = exponentialHistory.SampleLevel(MyLinearClampSampler, historyVolumeCoord, 0);

	// neighborhood clamping
	half4 minSample = half4(1, 1, 1, 1);
	half4 maxSample = half4(0, 0, 0, 0);
	half4 center = fogVolume.Load(uint4(id, 0));
	minSample = min(minSample, center);
	maxSample = max(maxSample, center);
	uint xPlusOne = min(id.x + 1, volumeRes.x - 1);
	uint xMinusOne = max(id.x - 1, 0);
	uint yPlusOne = min(id.y + 1, volumeRes.y - 1);
	uint yMinusOne = max(id.y - 1, 0);
	uint zPlusOne = min(id.z + 1, volumeRes.z - 1);
	uint zMinusOne = max(id.z - 1, 0);
	half4 samp = fogVolume.Load(uint4(xPlusOne, yPlusOne, zPlusOne, 0));
	minSample = min(minSample, samp);
	maxSample = max(maxSample, samp);
	samp = fogVolume.Load(uint4(xPlusOne, yPlusOne, zMinusOne, 0));
	minSample = min(minSample, samp);
	maxSample = max(maxSample, samp);
	samp = fogVolume.Load(uint4(xPlusOne, yMinusOne, zPlusOne, 0));
	minSample = min(minSample, samp);
	maxSample = max(maxSample, samp);
	samp = fogVolume.Load(uint4(xMinusOne, yPlusOne, zPlusOne, 0));
	minSample = min(minSample, samp);
	maxSample = max(maxSample, samp);
	samp = fogVolume.Load(uint4(xPlusOne, yMinusOne, zMinusOne, 0));
	minSample = min(minSample, samp);
	maxSample = max(maxSample, samp);
	samp = fogVolume.Load(uint4(xMinusOne, yPlusOne, zMinusOne, 0));
	minSample = min(minSample, samp);
	maxSample = max(maxSample, samp);
	samp = fogVolume.Load(uint4(xMinusOne, yMinusOne, zPlusOne, 0));
	minSample = min(minSample, samp);
	maxSample = max(maxSample, samp);
	samp = fogVolume.Load(uint4(xMinusOne, yMinusOne, zMinusOne, 0));
	minSample = min(minSample, samp);
	maxSample = max(maxSample, samp);

	half4 clampedHistory = clamp(historySample, minSample, maxSample);
		
	// trade less flickering for more ghosting
	clampedHistory = lerp(clampedHistory, historySample, 0.2f);

	// exponential moving average
	result[id] = lerp(center, clampedHistory, 0.92f);
}
