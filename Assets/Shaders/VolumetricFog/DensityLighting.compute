#include "UnityCG.cginc"
#include "FogCommon.cginc"
#pragma kernel CSMain SHADOWS NOISE LOCAL_LIGHTS SELF_SHADOW JITTER MIE
#pragma kernel CSMain SELF_SHADOW ATMOSPHERE

#define PI 3.14159

struct DirLightData 
{
	float4x4 worldToShadow[4];
	float4 lightSplitsNear;
	float4 lightSplitsFar;
};
RWStructuredBuffer<DirLightData> lightData;
float3 dirLightColor;
float3 dirLightDirection;

#ifdef SHADOWS
SamplerState MyPointClampSampler;
Texture2D<float> cascadeShadowMap;
#endif

RWTexture3D<half4> fogVolume;
float4 cameraPosition;
float4 frustumRays[4];
float scattering;
float g;
float fogHeight;
float fogFalloff;
float transmittance;
uint jitterIndex;
float4 sliceDepths[32];
float4 scatterColor;
float time;

float noiseIntensity;
float noiseSize;
float4 noiseDirection;
float4 ambientLightColor;

#ifdef LOCAL_LIGHTS
struct FogPointLight
{
	float4 position;
    float4 color;
    float range;
    float intensity;
};
RWStructuredBuffer<FogPointLight> pointLights;
#endif
int pointLightCount;

float3 volumeResolution;
int4 bayerMatrix[4];

#ifdef SHADOWS
float3 getCascadeShadowCoords(float3 worldPosition) 
{
	float distToCam = length(worldPosition - cameraPosition.xyz);
	float4 near = float4(distToCam >= lightData[0].lightSplitsNear); 
	float4 far = float4(distToCam < lightData[0].lightSplitsFar);
	float4 weights = near * far;

	float3 shadowCoord0 = mul(lightData[0].worldToShadow[0], float4(worldPosition, 1)).xyz; 
	float3 shadowCoord1 = mul(lightData[0].worldToShadow[1], float4(worldPosition, 1)).xyz;
	float3 shadowCoord2 = mul(lightData[0].worldToShadow[2], float4(worldPosition, 1)).xyz;
	float3 shadowCoord3 = mul(lightData[0].worldToShadow[3], float4(worldPosition, 1)).xyz;
	float3 coord = 
		shadowCoord0 * weights.x + 
		shadowCoord1 * weights.y +
		shadowCoord2 * weights.z +
		shadowCoord3 * weights.w;
	return coord;
}
#endif

float3 getFrustumRay(float2 uv)
{
	float3 upperRay = lerp(frustumRays[1].xyz, frustumRays[2].xyz, uv.x);
	float3 lowerRay = lerp(frustumRays[0].xyz, frustumRays[3].xyz, uv.x);
	return lerp(lowerRay, upperRay, uv.y);
}

float3 calcTransmittance(float3 position, float3 viewDirection, float distance)
{
	// integrate optical depth along light ray
	// https://iquilezles.org/www/articles/fog/fog.htm
	float opticalDepth = exp(-fogFalloff * (position.y + distance * viewDirection.y) + fogHeight);
	opticalDepth -= exp(-fogFalloff * position.y + fogHeight);
	opticalDepth /= -fogFalloff * viewDirection.y;
	return exp(-opticalDepth * scattering * transmittance * scatterColor);
}

#ifdef NOISE
// noise function copied from here: https://www.ronja-tutorials.com/2018/09/15/perlin-noise.html
float rand3dTo1d(float3 value, float3 dotDir = float3(12.9898, 78.233, 37.719)){
    //make value smaller to avoid artefacts
    float3 smallValue = sin(value);
    //get scalar value from 3d vector
    float random = dot(smallValue, dotDir);
    //make value more random by making it bigger and then taking teh factional part
    random = frac(sin(random) * 143758.5453);
    return random;
}
float3 rand3dTo3d(float3 value){
    return float3(
        rand3dTo1d(value, float3(12.989, 78.233, 37.719)),
        rand3dTo1d(value, float3(39.346, 11.135, 83.155)),
        rand3dTo1d(value, float3(73.156, 52.235, 09.151))
    );
}
float easeIn(float interpolator)
{
	return interpolator * interpolator;
}
float easeOut(float interpolator){
	return 1 - easeIn(1 - interpolator);
}
float easeInOut(float interpolator){
	float easeInValue = easeIn(interpolator);
	float easeOutValue = easeOut(interpolator);
	return lerp(easeInValue, easeOutValue, interpolator);
}
float perlinNoise(float3 value){
	float3 fraction = frac(value);
	float interpolatorX = easeInOut(fraction.x);
	float interpolatorY = easeInOut(fraction.y);
	float interpolatorZ = easeInOut(fraction.z);
	float3 cellNoiseZ[2];
	[unroll]
	for(int z=0;z<=1;z++){
		float3 cellNoiseY[2];
		[unroll]
		for(int y=0;y<=1;y++){
			float3 cellNoiseX[2];
			[unroll]
			for(int x=0;x<=1;x++){
				float3 cell = floor(value) + float3(x, y, z);
				float3 cellDirection = rand3dTo3d(cell) * 2 - 1;
				float3 compareVector = fraction - float3(x, y, z);
				cellNoiseX[x] = dot(cellDirection, compareVector);
			}
			cellNoiseY[y] = lerp(cellNoiseX[0], cellNoiseX[1], interpolatorX);
		}
		cellNoiseZ[z] = lerp(cellNoiseY[0], cellNoiseY[1], interpolatorY);
	}
	float3 noise = lerp(cellNoiseZ[0], cellNoiseZ[1], interpolatorZ);
	return noise;
}
#endif

float4 depthJitter[4];

#ifdef MIE
#define PHASE(pointPosition, lightDirection) henyeyGreensteinPhaseFunction(pointPosition, lightDirection, cameraPosition, g) 
#else 
#define PHASE(pointPosition, lightDirection) rayleighPhaseFunction(pointPosition, lightDirection, cameraPosition)
#endif

float sunLightIntensityMultiplier;

[numthreads(4,4,4)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
	float3 volCoord = float3(float3(id) / volumeResolution + 0.5f / volumeResolution);
	float z = sliceDepths[id.z / 4][id.z % 4];
#ifdef JITTER
	uint shiftedJitterIndex = (jitterIndex + bayerMatrix[id.y % 4][id.x % 4]) % 15;
	z *= depthJitter[shiftedJitterIndex / 4][shiftedJitterIndex % 4];
#endif
	float3 worldPosition = cameraPosition.xyz + z * getFrustumRay(volCoord.xy);

	float4 visibility;
#ifdef SHADOWS
	// 4-tap PCF filter
	float3 shadowCoord = getCascadeShadowCoords(worldPosition);
	float4 shadowDepth = cascadeShadowMap.GatherRed(MyPointClampSampler, shadowCoord.xy, int2(0, 0));
	visibility = float4(shadowDepth < shadowCoord.z);
	visibility.r = dot(visibility, 1/4.0f);
#else
	visibility.r = 1;
#endif	

#ifdef NOISE
	float noise = saturate(perlinNoise((worldPosition + noiseDirection.xyz * time) * noiseSize));
	noise = noise * 0.8 + 0.2 *saturate(perlinNoise((worldPosition + noiseDirection.xyz * time)));
	noise = noise * noiseIntensity + (1 - noiseIntensity);

	scattering *= saturate(exp(-clamp(worldPosition.y * fogFalloff + fogHeight, -50, 50)) * noise);
#else
	scattering *= saturate(exp(-clamp(worldPosition.y * fogFalloff + fogHeight, -50, 50)));
#endif

	half4 result = half4(ambientLightColor.rgb, scattering);
	float3 scatteredColor = dirLightColor * visibility.r;

	scatteredColor *= sunLightIntensityMultiplier;

#ifdef SELF_SHADOW
	// transmittance from directional light to worldPosition
	float3 transmittance = calcTransmittance(worldPosition, dirLightDirection, 100000);
	scatteredColor *= transmittance;
#endif

	float phase = PHASE(worldPosition, dirLightDirection);
	result.rgb += scatteredColor * phase;

#ifdef LOCAL_LIGHTS
	// point light lighting
	for (int i = 0; i < pointLightCount; i++) 
	{
		FogPointLight light = pointLights[i];
		//inverse-square light attenuation
		float3 lightVector = light.position.xyz - worldPosition;
		float3 lightVecNorm = normalize(lightVector);
		float lightDist = length(lightVector);
		float attentuation = 1 / (pow(5 * lightDist / light.range, 2) + 1);
		attentuation *= sunLightIntensityMultiplier;
		phase = PHASE(worldPosition, lightVecNorm);
		result.rgb += light.color.rgb * attentuation * phase 
			* light.intensity * calcTransmittance(light.position, lightVecNorm, lightDist);
	}
#endif

	result.rgb *= scattering * scatterColor;

	fogVolume[id] = result;
}