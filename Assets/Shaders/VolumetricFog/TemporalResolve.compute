#include "UnityCG.cginc"
#pragma kernel CSMain

Texture3D<half4> historyFogVolume;
Texture3D<half4> historyFogVolume1;
RWTexture3D<half4> fogVolume;
RWTexture3D<half4> blendedFogVolume;

SamplerState MyLinearClampSampler;

float4 cameraPosition;
float nearPlane;
float farPlane;
float4 frustumRays[4];
float4 sliceDepths[32];
matrix historyViewProjection;
matrix historyViewProjection1;
float logfarOverNearInv;
float time;
float historyTime0;
float historyTime1;
float3 volumeResolution;

float3 getFrustumRay(float2 uv)
{
	float3 upperRay = lerp(frustumRays[1].xyz, frustumRays[2].xyz, uv.x);
	float3 lowerRay = lerp(frustumRays[0].xyz, frustumRays[3].xyz, uv.x);
	return lerp(lowerRay, upperRay, uv.y);
}

[numthreads(4,4,4)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
	//http://www.klayge.org/material/4_11/Filmic%20SMAA%20v7.pdf

	float3 volCoord = float3(float3(id) / volumeResolution + 0.5f / volumeResolution);

	// calculate position in history volume
	float z = sliceDepths[id.z / 4][id.z % 4];
	float3 worldPosition = cameraPosition.xyz + z * getFrustumRay(volCoord.xy);
	//worldPosition -= (float3(24, 0, 0) * time);

	float4 historyNdc = mul(historyViewProjection, float4(worldPosition, 1));
	historyNdc /= historyNdc.w;
	float3 historyVolumeCoord = float3((historyNdc.xy + 1) / 2, 0);
	historyVolumeCoord.y = 1 - historyVolumeCoord.y;
	z = nearPlane + (farPlane - nearPlane) * Linear01Depth(historyNdc.z);
	historyVolumeCoord.z = log(z / nearPlane) * logfarOverNearInv;

	half4 historySample = historyFogVolume.SampleLevel(MyLinearClampSampler, historyVolumeCoord, 0);

	historyNdc = mul(historyViewProjection1, float4(worldPosition, 1));
	historyNdc /= historyNdc.w;
	float3 historyVolumeCoord1 = float3((historyNdc.xy + 1) / 2, 0);
	historyVolumeCoord1.y = 1 - historyVolumeCoord1.y;
	z = nearPlane + (farPlane - nearPlane) * Linear01Depth(historyNdc.z);
	historyVolumeCoord1.z = log(z / nearPlane) * logfarOverNearInv;

	half4 historySample1 = historyFogVolume1.SampleLevel(MyLinearClampSampler, historyVolumeCoord1, 0);

	half blendFactor = 1 / 3.0f;

	// simple moving average
	blendedFogVolume[id] = blendFactor * (fogVolume[id] + historySample + historySample1);
}
